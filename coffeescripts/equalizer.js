// Generated by CoffeeScript 1.8.0
(function() {
  var AudioContext, analyser, context, ctx, drawSpectrum, gradient, i, jsNode, loadSound, onError, playSound, setupAudioNodes, srcNode, val;

  AudioContext = 0;

  context = new AudioContext();

  srcNode = 0;

  analyser = 0;

  jsNode = 0;

  ctx = $("music").get()[0].getContext("2d");

  i = 0;

  val = 0;

  gradient = ctx.createLinearGradient(0, 0, 0, 255);

  gradient.addColorStop(1, "#FFFFFF");

  gradient.addColorStop(0, "#000000");

  if (!window.AudioContext) {
    if (!window.webkitAudioContext) {
      alert("AudioContext was not found!");
    }
    window.AudioContext = window.webkitAudioContext;
  }

  setupAudioNodes = function() {
    "use strict";
    jsNode = context.createScriptProcessor(2048, 1, 1);
    jsNode.connect(context.destination);
    analyser = context.createAnalyser();
    analyser.smoothingTimeConstant = 0.795;
    analyser.fftSize = 2048;
    srcNode = context.createBufferSource();
    srcNode.connect(analyser);
    analyser.connect(jsNode);
    srcNode.connect(context.destination);
  };

  setupAudioNodes();

  playSound = function(buffer) {
    "use strict";
    srcNode.buffer = buffer;
    srcNode.start(0);
  };

  onError = function(e) {
    "use strict";
    console.log(e);
  };

  loadSound = function(url) {
    "use strict";
    var request;
    request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.responseType = "arraybuffer";
    request.onload = function() {
      context.decodeAudioData(request.response, (function(buffer) {
        playSound(buffer);
      }), onError);
    };
    request.send();
  };

  drawSpectrum = function(array) {
    "use strict";
    while (i < array.length) {
      i = i + 1;
      val = array[i];
      ctx.fillRect(i * 8, 260 - val, 4, 260);
    }
  };

  jsNode.onaudioprocess = function() {
    "use strict";
    var arr;
    arr = new Uint8Array(analyser.frequencyBinCount);
    analyser.getByteFrequencyData(arr);
    ctx.clearRect(0, 0, 2048, 255);
    ctx.fillStyle = gradient;
    return drawSpectrum(arr);
  };

}).call(this);
